# coding: utf-8

import numpy as np
import pandas as pd
from asl_data import AslDb

pd.options.display.max_columns = 200

asl = AslDb()  # initializes the database
asl.df.head()  # displays the first five rows of the asl database, indexed by video and frame


asl.df['grnd-ry'] = asl.df['right-y'] - asl.df['nose-y']
asl.df.head()  # the new feature 'grnd-ry' is now in the frames dictionary

# ##### Try it!

# In[5]:

from asl_utils import test_features_tryit

# TODO add df columns for 'grnd-rx', 'grnd-ly', 'grnd-lx' representing differences between hand and nose locations
asl.df['grnd-lx'] = asl.df['left-x'] - asl.df['nose-x']
asl.df['grnd-ly'] = asl.df['left-y'] - asl.df['nose-y']
asl.df['grnd-rx'] = asl.df['right-x'] - asl.df['nose-x']
asl.df['grnd-ry'] = asl.df['right-y'] - asl.df['nose-y']

# test the code
test_features_tryit(asl)

# In[6]:

# collect the features into a list
features_ground = ['grnd-rx', 'grnd-ry', 'grnd-lx', 'grnd-ly']
# show a single set of features for a given (video, frame) tuple

# ##### Build the training set
# Now that we have a feature list defined, we can pass that list to the `build_training` method to collect the features for all the words in the training set.  Each word in the training set has multiple examples from various videos.  Below we can see the unique words that have been loaded into the training set:

# In[7]:

training = asl.build_training(features_ground)
print("Training words: {}".format(training.words))

#

df_means = asl.df.groupby('speaker').mean()

# To select a mean that matches by speaker, use the pandas [map](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.map.html) method:



# In[11]:

from asl_utils import test_std_tryit

# TODO Create a dataframe named `df_std` with standard deviations grouped by speaker
df_std = asl.df.groupby('speaker').std()

# test the code
test_std_tryit(df_std)

# <a id='part1_submission'></a>
# ### Features Implementation Submission
# Implement four feature sets and answer the question that follows.
# - normalized Cartesian coordinates
#     - use *mean* and *standard deviation* statistics and the [standard score](https://en.wikipedia.org/wiki/Standard_score) equation to account for speakers with different heights and arm length
#
# - polar coordinates
#     - calculate polar coordinates with [Cartesian to polar equations](https://en.wikipedia.org/wiki/Polar_coordinate_system#Converting_between_polar_and_Cartesian_coordinates)
#     - use the [np.arctan2](https://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.arctan2.html) function and *swap the x and y axes* to move the $0$ to $2\pi$ discontinuity to 12 o'clock instead of 3 o'clock;  in other words, the normal break in radians value from $0$ to $2\pi$ occurs directly to the left of the speaker's nose, which may be in the signing area and interfere with results.  By swapping the x and y axes, that discontinuity move to directly above the speaker's head, an area not generally used in signing.
#
# - delta difference
#     - as described in Thad's lecture, use the difference in values between one frame and the next frames as features
#     - pandas [diff method](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.diff.html) and [fillna method](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html) will be helpful for this one
#
# - custom features
#     - These are your own design; combine techniques used above or come up with something else entirely. We look forward to seeing what you come up with!
#     Some ideas to get you started:
#         - normalize using a [feature scaling equation](https://en.wikipedia.org/wiki/Feature_scaling)
#         - normalize the polar coordinates
#         - adding additional deltas
#

# In[12]:

# TODO add features for normalized by speaker values of left, right, x, y
# Name these 'norm-rx', 'norm-ry', 'norm-lx', and 'norm-ly'
# using Z-score scaling (X-Xmean)/Xstd
cols = ['right-x', 'right-y', 'left-x', 'left-y']
features_norm = ['norm-rx', 'norm-ry', 'norm-lx', 'norm-ly']
for feature, col in zip(features_norm, cols):
    asl.df[feature] = (asl.df[col] - asl.df['speaker'].map(df_means[col])) / asl.df['speaker'].map(df_std[col])
cols = ['nose-x', 'nose-y']

asl.df['norm-nose-x'] = (asl.df['nose-x'] - asl.df['speaker'].map(df_means['nose-x'])) / asl.df['speaker'].map(
    df_std['nose-x'])
asl.df['norm-nose-y'] = (asl.df['nose-y'] - asl.df['speaker'].map(df_means['nose-y'])) / asl.df['speaker'].map(
    df_std['nose-y'])
asl.df['norm-grnd-rx'] = asl.df['norm-rx'] - asl.df['norm-nose-x']
asl.df['norm-grnd-ry'] = asl.df['norm-ry'] - asl.df['norm-nose-y']
asl.df['norm-grnd-lx'] = asl.df['norm-lx'] - asl.df['norm-nose-x']
asl.df['norm-grnd-ly'] = asl.df['norm-ly'] - asl.df['norm-nose-y']

# In[13]:

# TODO add features for polar coordinate values where the nose is the origin
# Name these 'polar-rr', 'polar-rtheta', 'polar-lr', and 'polar-ltheta'
# Note that 'polar-rr' and 'polar-rtheta' refer to the radius and angle
features_polar = ['polar-rr', 'polar-rtheta', 'polar-lr', 'polar-ltheta']
asl.df['polar-rr'] = np.sqrt(asl.df['grnd-rx'] ** 2 + asl.df['grnd-ry'] ** 2)
asl.df['polar-rtheta'] = np.arctan2(asl.df['grnd-rx'], asl.df['grnd-ry'])

asl.df['polar-lr'] = np.sqrt(asl.df['grnd-lx'] ** 2 + asl.df['grnd-ly'] ** 2)
asl.df['polar-ltheta'] = np.arctan2(asl.df['grnd-lx'], asl.df['grnd-ly'])

# In[14]:

# TODO add features for left, right, x, y differences by one time step, i.e. the "delta" values discussed in the lecture
# Name these 'delta-rx', 'delta-ry', 'delta-lx', and 'delta-ly'

features_delta = ['delta-rx', 'delta-ry', 'delta-lx', 'delta-ly']

asl.df['delta-rx'] = asl.df['right-x'].diff().fillna(0)
asl.df['delta-ry'] = asl.df['right-y'].diff().fillna(0)
asl.df['delta-lx'] = asl.df['left-x'].diff().fillna(0)
asl.df['delta-ly'] = asl.df['left-y'].diff().fillna(0)

# In[15]:

# df_deltas_means = asl.df[['speaker'] + features_delta].groupby('speaker').agg([np.mean, np.std])
# features_custom = ['delta-rx-norm', 'delta-ry-norm', 'delta-lx-norm', 'delta-ly-norm']
# for f in features_delta:
#     asl.df[f + "-norm"] = (asl.df[f] - asl.df['speaker'].map(df_deltas_means[(f, "mean")])) / asl.df['speaker'].map(
#         df_deltas_means[(f, "std")])

# In[16]:

# TODO add features of your own design, which may be a combination of the above or something else
# Name these whatever you would like

# TODO define a list named 'features_custom' for building the training set
# features_custom = ['speed-rx', 'speed-ry', 'speed-lx', 'speed-ly']

# asl.df['delta-rx-abs'] = asl.df['delta-rx'].abs()
# asl.df['delta-ry-abs'] = asl.df['delta-ry'].abs()
# asl.df['delta-lx-abs'] = asl.df['delta-lx'].abs()
# asl.df['delta-ly-abs'] = asl.df['delta-ly'].abs()

# speeds = asl.df.groupby('speaker')['delta-rx-abs', 'delta-ry-abs', 'delta-lx-abs', 'delta-ly-abs'].mean()

# asl.df['speed-rx'] = asl.df['speaker'].map(speeds['delta-rx-abs'])
# asl.df['speed-ry'] = asl.df['speaker'].map(speeds['delta-ry-abs'])
# asl.df['speed-lx'] = asl.df['speaker'].map(speeds['delta-lx-abs'])
# asl.df['speed-ly'] = asl.df['speaker'].map(speeds['delta-ly-abs'])

# df_deltas_means = asl.df[['speaker'] + features_delta].groupby('speaker').agg([np.mean, np.std])
# features_custom = ['delta-rx-norm', 'delta-ry-norm', 'delta-lx-norm', 'delta-ly-norm']
# for f in features_delta:
#     asl.df[f + "-norm"] = (asl.df[f] - asl.df['speaker'].map(df_deltas_means[(f, "mean")])) / asl.df['speaker'].map(
#         df_deltas_means[(f, "std")])

# **Question 1:**  What custom features did you choose for the features_custom set and why?
#
# speed --> mean of the deltas in move to detect how fast the speaker hands move on average. It may be useful to detect if a move is relevant.
#

# <a id='part1_test'></a>
# ### Features Unit Testing
# Run the following unit tests as a sanity check on the defined "ground", "norm", "polar", and 'delta"
# feature sets.  The test simply looks for some valid values but is not exhaustive.  However, the project should not be submitted if these tests don't pass.


# <a id='part2_tutorial'></a>
# ## PART 2: Model Selection
# ### Model Selection Tutorial
# The objective of Model Selection is to tune the number of states for each word HMM prior to testing on unseen data.  In this section you will explore three methods:
# - Log likelihood using cross-validation folds (CV)
# - Bayesian Information Criterion (BIC)
# - Discriminative Information Criterion (DIC)

# ##### Train a single word
# Now that we have built a training set with sequence data, we can "train" models for each word.  As a simple starting example, we train a single word using Gaussian hidden Markov models (HMM).   By using the `fit` method during training, the [Baum-Welch Expectation-Maximization](https://en.wikipedia.org/wiki/Baum%E2%80%93Welch_algorithm) (EM) algorithm is invoked iteratively to find the best estimate for the model *for the number of hidden states specified* from a group of sample seequences. For this example, we *assume* the correct number of hidden states is 3, but that is just a guess.  How do we know what the "best" number of states for training is?  We will need to find some model selection technique to choose the best parameter.

# In[34]:

import warnings
from hmmlearn.hmm import GaussianHMM


# def train_a_word(word, num_hidden_states, features):
#     warnings.filterwarnings("ignore", category=DeprecationWarning)
#     training = asl.build_training(features)
#     X, lengths = training.get_word_Xlengths(word)
#     model = GaussianHMM(n_components=num_hidden_states, n_iter=1000).fit(X, lengths)
#     logL = model.score(X, lengths)
#     return model, logL
#
#
# demoword = 'BOOK'
# model, logL = train_a_word(demoword, 3, features_ground)
# print("Number of states trained in model for {} is {}".format(demoword, model.n_components))
# print("logL = {}".format(logL))


# The HMM model has been trained and information can be pulled from the model, including means and variances for each feature and hidden state.  The [log likelihood](http://math.stackexchange.com/questions/892832/why-we-consider-log-likelihood-instead-of-likelihood-in-gaussian-distribution) for any individual sample or group of samples can also be calculated with the `score` method.

# In[19]:

# def show_model_stats(word, model):
#     print("Number of states trained in model for {} is {}".format(word, model.n_components))
#     variance = np.array([np.diag(model.covars_[i]) for i in range(model.n_components)])
#     for i in range(model.n_components):  # for each hidden state
#         print("hidden state #{}".format(i))
#         print("mean = ", model.means_[i])
#         print("variance = ", variance[i])
#         print()
#
#
# show_model_stats(demoword, model)

# ##### Try it!
# Experiment by changing the feature set, word, and/or num_hidden_states values in the next cell to see changes in values.

# In[20]:

# my_testword = 'CHOCOLATE'
# model, logL = train_a_word(my_testword, 3, features_delta)  # Experiment here with different parameters
# show_model_stats(my_testword, model)
# print("logL = {}".format(logL))

# ##### Visualize the hidden states
# We can plot the means and variances for each state and feature.  Try varying the number of states trained for the HMM model and examine the variances.  Are there some models that are "better" than others?  How can you tell?  We would like to hear what you think in the classroom online.

# In[21]:



# In[22]:

import math
from matplotlib import (cm, pyplot as plt, mlab)

# ##### Cross-validation folds
# If we simply score the model with the Log Likelihood calculated from the feature sequences it has been trained on, we should expect that more complex models will have higher likelihoods. However, that doesn't tell us which would have a better likelihood score on unseen data.  The model will likely be overfit as complexity is added.  To estimate which topology model is better using only the training data, we can compare scores using cross-validation.  One technique for cross-validation is to break the training set into "folds" and rotate which fold is left out of training.  The "left out" fold scored.  This gives us a proxy method of finding the best model to use on "unseen data". In the following example, a set of word sequences is broken into three folds using the [scikit-learn Kfold](http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.KFold.html) class object. When you implement `SelectorCV`, you will use this technique.

# In[105]:

from sklearn.model_selection import KFold

training = asl.build_training(features_ground)  # Experiment here with different feature sets
# word = 'VEGETABLE'  # Experiment here with different words
# word_sequences = training.get_word_sequences(word)
# split_method = KFold()
# for cv_train_idx, cv_test_idx in split_method.split(word_sequences):
#     print("Train fold indices:{} Test fold indices:{}".format(cv_train_idx, cv_test_idx))  # view indices of the folds

# **Tip:** In order to run `hmmlearn` training using the X,lengths tuples on the new folds, subsets must be combined based on the indices given for the folds.  A helper utility has been provided in the `asl_utils` module named `combine_sequences` for this purpose.

# ##### Scoring models with other criterion
# Scoring model topologies with **BIC** balances fit and complexity within the training set for each word.  In the BIC equation, a penalty term penalizes complexity to avoid overfitting, so that it is not necessary to also use cross-validation in the selection process.  There are a number of references on the internet for this criterion.  These [slides](http://www2.imm.dtu.dk/courses/02433/doc/ch6_slides.pdf) include a formula you may find helpful for your implementation.
#
# The advantages of scoring model topologies with **DIC** over BIC are presented by Alain Biem in this [reference](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.58.6208&rep=rep1&type=pdf) (also found [here](https://pdfs.semanticscholar.org/ed3d/7c4a5f607201f3848d4c02dd9ba17c791fc2.pdf)).  DIC scores the discriminant ability of a training set for one word against competing words.  Instead of a penalty term for complexity, it provides a penalty if model liklihoods for non-matching words are too similar to model likelihoods for the correct word in the word set.

# <a id='part2_submission'></a>
# ### Model Selection Implementation Submission
# Implement `SelectorCV`, `SelectorBIC`, and `SelectorDIC` classes in the `my_model_selectors.py` module.  Run the selectors on the following five words. Then answer the questions about your results.
#
# **Tip:** The `hmmlearn` library may not be able to train or score all models.  Implement try/except contructs as necessary to eliminate non-viable models from consideration.

# In[28]:

words_to_train = ['FISH', 'BOOK']#, 'VEGETABLE', 'FUTURE', 'JOHN']
import timeit

# In[131]:

# autoreload for automatically reloading changes made in my_model_selectors and my_recognizer


# In[150]:

# TODO: Implement SelectorCV in my_model_selector.py
from my_model_selectors import SelectorCV

# training = asl.build_training(features_ground)  # Experiment here with different feature sets defined in part 1
# sequences = training.get_all_sequences()
# Xlengths = training.get_all_Xlengths()
# for word in words_to_train:
#     start = timeit.default_timer()
#     model = SelectorCV(sequences, Xlengths, word,
#                        min_n_components=2, max_n_components=15, random_state=14).select()
#     end = timeit.default_timer() - start
#     if model is not None:
#         print("Training complete for {} with {} states with time {} seconds".format(word, model.n_components, end))
#     else:
#         print("Training failed for {}".format(word))



# seqs = training.get_all_sequences()[word]
# print ("Seqs: {}. Total length: {}".format(seqs, len(seqs)))
# print (seqs)
# kf = KFold(n_splits=4, random_state=12, shuffle=True)
# a = np.arange(20) * 10
# for cv_train_idx, cv_test_idx in kf.split(lengths):
#     print("Train fold indices:{} Test fold indices:{}".format(cv_train_idx, cv_test_idx))  # view indices of the folds

# sel = seqs[cv_test_idx]

# lengths[cv_train_idx]

# for word in training.words:
#     print(len(Xlengths[word][1]))


# In[135]:

# TODO: Implement SelectorBIC in module my_model_selectors.py
# from my_model_selectors import SelectorBIC
#
# training = asl.build_training(features_ground)  # Experiment here with different feature sets defined in part 1
# sequences = training.get_all_sequences()
# Xlengths = training.get_all_Xlengths()
# for word in words_to_train:
#     start = timeit.default_timer()
#     model = SelectorBIC(sequences, Xlengths, word,
#                         min_n_components=2, max_n_components=15, random_state=14).select()
#     end = timeit.default_timer() - start
#     if model is not None:
#         print("Training complete for {} with {} states with time {} seconds".format(word, model.n_components, end))
#     else:
#         print("Training failed for {}".format(word))

# In[ ]:

# TODO: Implement SelectorDIC in module my_model_selectors.py
# from my_model_selectors import SelectorDIC
#
# training = asl.build_training(features_ground)  # Experiment here with different feature sets defined in part 1
# sequences = training.get_all_sequences()
# Xlengths = training.get_all_Xlengths()
# for word in words_to_train:
#     start = timeit.default_timer()
#     model = SelectorDIC(sequences, Xlengths, word,
#                         min_n_components=2, max_n_components=15, random_state=14).select()
#     end = timeit.default_timer() - start
#     if model is not None:
#         print("Training complete for {} with {} states with time {} seconds".format(word, model.n_components, end))
#     else:
#         print("Training failed for {}".format(word))

# **Question 2:**  Compare and contrast the possible advantages and disadvantages of the various model selectors implemented.
#
# **Answer 2:**
# Both BIC and DIC aim to reward high likelihood while penalizing the model complexity.
#
# BIC is supported by solid Bayesian theory. It is an approximation to the Bayes factor, which may be considered as the gold standard for model comparison when feasible. However, it requires that the models remain simple and it assumes there is a valid true model, as well as a valid bayesian comparison.
#
#
# DIC aims to solve the problem of complex models comparison. Altough it uses a more complex information criterion that seems to work in some cases, it lacks the BIC's consistency.
#
#
# On its side, Cross Validation selector has the huge advantage that it may be used in almost any problem, but it usually requires a high number of simulations in order to produce good results.

# <a id='part2_test'></a>
# ### Model Selector Unit Testing
# Run the following unit tests as a sanity check on the implemented model selectors.  The test simply looks for valid interfaces  but is not exhaustive. However, the project should not be submitted if these tests don't pass.

# In[40]:
#
# from asl_test_model_selectors import TestSelectors
#
# suite = unittest.TestLoader().loadTestsFromModule(TestSelectors())
# unittest.TextTestRunner().run(suite)

# <a id='part3_tutorial'></a>
# ## PART 3: Recognizer
# The objective of this section is to "put it all together".  Using the four feature sets created and the three model selectors, you will experiment with the models and present your results.  Instead of training only five specific words as in the previous section, train the entire set with a feature set and model selector strategy.
# ### Recognizer Tutorial
# ##### Train the full training set
# The following example trains the entire set with the example `features_ground` and `SelectorConstant` features and model selector.  Use this pattern for you experimentation and final submission cells.
#
#

# In[ ]:

# from my_model_selectors import SelectorConstant

#
# def train_all_words(features, model_selector):
#     training = asl.build_training(features)  # Experiment here with different feature sets defined in part 1
#     sequences = training.get_all_sequences()
#     Xlengths = training.get_all_Xlengths()
#     model_dict = {}
#     for word in training.words:
#         model = model_selector(sequences, Xlengths, word,
#                                n_constant=3).select()
#         model_dict[word] = model
#     return model_dict
#
#
# models = train_all_words(features_ground, SelectorConstant)
# print("Number of word models returned = {}".format(len(models)))
#
# # ##### Load the test set
# # The `build_test` method in `ASLdb` is similar to the `build_training` method already presented, but there are a few differences:
# # - the object is type `SinglesData`
# # - the internal dictionary keys are the index of the test word rather than the word itself
# # - the getter methods are `get_all_sequences`, `get_all_Xlengths`, `get_item_sequences` and `get_item_Xlengths`
#
# # In[ ]:
#
# test_set = asl.build_test(features_ground)
# print("Number of test set items: {}".format(test_set.num_items))
# print("Number of test set sentences: {}".format(len(test_set.sentences_index)))
#
# # <a id='part3_submission'></a>
# # ### Recognizer Implementation Submission
# # For the final project submission, students must implement a recognizer following guidance in the `my_recognizer.py` module.  Experiment with the four feature sets and the three model selection methods (that's 12 possible combinations). You can add and remove cells for experimentation or run the recognizers locally in some other way during your experiments, but retain the results for your discussion.  For submission, you will provide code cells of **only three** interesting combinations for your discussion (see questions below). At least one of these should produce a word error rate of less than 60%, i.e. WER < 0.60 .
# #
# # **Tip:** The hmmlearn library may not be able to train or score all models.  Implement try/except contructs as necessary to eliminate non-viable models from consideration.
#
# # In[ ]:
#
# # TODO implement the recognize method in my_recognizer
# from my_recognizer import recognize
# from asl_utils import show_errors
#
# # In[ ]:
#
# # TODO Choose a feature set and model selector
# features = features_ground  # change as needed
# model_selector = SelectorConstant  # change as needed
#
# # TODO Recognize the test set and display the result with the show_errors method
# models = train_all_words(features, model_selector)
# test_set = asl.build_test(features)
# probabilities, guesses = recognize(models, test_set)
# show_errors(guesses, test_set)
#
# # In[ ]:
#
# # TODO Choose a feature set and model selector
# # TODO Recognize the test set and display the result with the show_errors method
#
#
# # In[ ]:
#
# # TODO Choose a feature set and model selector
# # TODO Recognize the test set and display the result with the show_errors method
#
#
# # **Question 3:**  Summarize the error results from three combinations of features and model selectors.  What was the "best" combination and why?  What additional information might we use to improve our WER?  For more insight on improving WER, take a look at the introduction to Part 4.
# #
# # **Answer 3:**
#
# # <a id='part3_test'></a>
# # ### Recognizer Unit Tests
# # Run the following unit tests as a sanity check on the defined recognizer.  The test simply looks for some valid values but is not exhaustive. However, the project should not be submitted if these tests don't pass.
#
# # In[ ]:
#
# from asl_test_recognizer import TestRecognize
#
# suite = unittest.TestLoader().loadTestsFromModule(TestRecognize())
# unittest.TextTestRunner().run(suite)
#
# # <a id='part4_info'></a>
# # ## PART 4: (OPTIONAL)  Improve the WER with Language Models
# # We've squeezed just about as much as we can out of the model and still only get about 50% of the words right! Surely we can do better than that.  Probability to the rescue again in the form of [statistical language models (SLM)](https://en.wikipedia.org/wiki/Language_model).  The basic idea is that each word has some probability of occurrence within the set, and some probability that it is adjacent to specific other words. We can use that additional information to make better choices.
# #
# # ##### Additional reading and resources
# # - [Introduction to N-grams (Stanford Jurafsky slides)](https://web.stanford.edu/class/cs124/lec/languagemodeling.pdf)
# # - [Speech Recognition Techniques for a Sign Language Recognition System, Philippe Dreuw et al](https://www-i6.informatik.rwth-aachen.de/publications/download/154/Dreuw--2007.pdf) see the improved results of applying LM on *this* data!
# # - [SLM data for *this* ASL dataset](ftp://wasserstoff.informatik.rwth-aachen.de/pub/rwth-boston-104/lm/)
# #
# # ##### Optional challenge
# # The recognizer you implemented in Part 3 is equivalent to a "0-gram" SLM.  Improve the WER with the SLM data provided with the data set in the link above using "1-gram", "2-gram", and/or "3-gram" statistics. The `probabilities` data you've already calculated will be useful and can be turned into a pandas DataFrame if desired (see next cell).
# # Good luck!  Share your results with the class!
#
# # In[ ]:
#
# # create a DataFrame of log likelihoods for the test word items
# df_probs = pd.DataFrame(data=probabilities)
# df_probs.head()

from my_model_selectors import *
from my_recognizer import recognize
from asl_utils import show_errors

features = features_ground # change as needed
model_selector = SelectorCV # change as needed

def train_all_words(features, model_selector):
    training = asl.build_training(features)  # Experiment here with different feature sets defined in part 1
    sequences = training.get_all_sequences()
    Xlengths = training.get_all_Xlengths()
    model_dict = {}
    for word in training.words:
        model = model_selector(sequences, Xlengths, word,
                        n_constant=3).select()
        model_dict[word]=model
    return model_dict

# TODO Recognize the test set and display the result with the show_errors method
models = train_all_words(features, model_selector)
test_set = asl.build_test(features)
probabilities, guesses = recognize(models, test_set)
pass
show_errors(guesses, test_set)
pass
